package app

import (
	"fmt"
	"github.com/josuebrunel/gopkg/component"
	"log/slog"
	"time"
)

func getLocaledTime(date time.Time) string {
	loc, err := time.LoadLocation("America/Vancouver")
	if err != nil {
		slog.Error("Failed to load location")
	}
	date = date.In(loc)
	return date.Format(time.DateTime)
}

templ Head(title string) {
	<head>
		<title>Trip Report { title } | Trip Analyzer</title>
		<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@picocss/pico@2/css/pico.min.css"/>
		<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
		@component.LinkStyle("/static/css/style.css", templ.Attributes{})
		<script src="/static/js/app.js"></script>
	</head>
}

templ Card(title, content string) {
	<div class="card">
		<h3>{ title }</h3>
		<p>{ content }</p>
	</div>
}

templ Summary(report ReportData) {
	<div class="grid">
		@Card("Total Trips", fmt.Sprintf("%d", report.TotalTrips))
		@Card("Total Duration", fmt.Sprintf("%d min", report.TotalDuration))
		@Card("Total Charged", fmt.Sprintf("$ %.2f CAD", report.TotalCharged))
	</div>
	<div class="grid">
		@Card("Total Distance", fmt.Sprintf("%.2f km", report.TotalDistance))
		@Card("Average cost per trip", fmt.Sprintf("$ %.2f CAD", report.AvgCostPerTrip))
		@Card("Average distance per trip", fmt.Sprintf("%.2f km", report.AvgDistance))
	</div>
}

templ ChartContainer(title, id string) {
	<div class="chart-container">
		<h3>{ title }</h3>
		<canvas id={ id }></canvas>
	</div>
}

templ Chart(report ReportData) {
	<div class="chart-grid">
		@ChartContainer("Trips per Day", "tripsByDayChart")
		@ChartContainer("Cost per Day", "chargesByDayChart")
	</div>
	<div class="chart-grid">
		@ChartContainer("Cost per Trip", "costPerTripChart")
		@ChartContainer("Distance vs cost", "distanceVsCostChart")
	</div>
}

templ TripsDetail(report ReportData) {
	<div>
		<table>
			<thead>
				<tr>
					<th>#</th>
					<th>Date</th>
					<th>Vehicle</th>
					<th>Duration</th>
					<th>Cost</th>
					<th>Distance</th>
				</tr>
			</thead>
			<tbody>
				for idx, trip := range report.AllTrips {
					<tr>
						<td>{ idx+1 }</td>
						<td>{ getLocaledTime(trip.Date) } PST</td>
						<td>{ trip.Vehicle }</td>
						<td>{ trip.Duration } min</td>
						<td>${ fmt.Sprintf("%.2f", trip.Charged) } CAD</td>
						<td>{ trip.Distance } km</td>
					</tr>
				}
			</tbody>
		</table>
	</div>
}

templ Body(report ReportData) {
	<body>
		<main class="container">
			<div class="header">
				<h1>ðŸš— Trip Analysis Report</h1>
				<p>Report from <strong>{ getLocaledTime(report.DateStart) } PST</strong> to <strong>{ getLocaledTime(report.DateEnd) } PST</strong></p>
				<a href={ templ.URL(fmt.Sprintf("/report/%s/csv", report.ID)) } role="button" class="secondary" download={ fmt.Sprintf("trip_report_%s.csv", report.ID) }>
					Export as CSV
				</a>
			</div>
			@Summary(report)
			@Chart(report)
			@TripsDetail(report)
		</main>
		<script>
			const report = {{ report }}
			// Colors for charts
            const colors = [
                'rgba(54, 162, 235, 0.7)',
                'rgba(255, 99, 132, 0.7)',
                'rgba(255, 206, 86, 0.7)',
                'rgba(75, 192, 192, 0.7)',
                'rgba(153, 102, 255, 0.7)',
                'rgba(255, 159, 64, 0.7)',
                'rgba(199, 199, 199, 0.7)'
            ];

			initializeCharts(report.days, report.tripsByDay, report.chargesByDay, 
				report.costPerTrip, report.distancePerTrip, report.costPerTrip, colors)
		</script>
	</body>
}

templ ErrorPage(err string) {
	@component.HTML(templ.Attributes{}) {
		@Head("Report not found")
		<body>
			<main class="container">
				<div class="header">
					<h1>{ err }</h1>
				</div>
			</main>
		</body>
	}
}

templ Layout(report ReportData) {
	@component.HTML(templ.Attributes{}) {
		@Head(report.ID)
		@Body(report)
	}
}

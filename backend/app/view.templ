package app

import (
	"fmt"
	"github.com/josuebrunel/gopkg/component"
	"log/slog"
	"time"
)

func getLocaledTime(date time.Time) string {
	loc, err := time.LoadLocation("America/Vancouver")
	if err != nil {
		slog.Error("Failed to load location")
	}
	date = date.In(loc)
	return date.Format(time.DateTime)
}

templ Head(title string) {
	<head>
		<title>Trip Report { title } | Trip Analyzer</title>
		<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css" integrity="sha512-SnH5WK+bZxgPHs44uWIX+LLJAJ9/2PkPKZ5QiAj6Ta86w+fsb2TkcmfRyVX3pBnMFcV7oQPJkl9QevSCWr3W6A==" crossorigin="anonymous" referrerpolicy="no-referrer"/>
		<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@picocss/pico@2/css/pico.min.css"/>
		<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
		@component.LinkStyle("/static/css/style.css", templ.Attributes{})
		<script src="/static/js/app.js"></script>
	</head>
}

templ Card(title, content string) {
	<div class="card">
		<h3>{ title }</h3>
		<p>{ content }</p>
	</div>
}

templ Summary(report ReportData) {
	<div class="grid">
		@Card("Total Trips", fmt.Sprintf("%d", report.TotalTrips))
		@Card("Total Duration", fmt.Sprintf("%d min", report.TotalDuration))
		@Card("Total Charged", fmt.Sprintf("$ %.2f CAD", report.TotalCharged))
	</div>
	<div class="grid">
		@Card("Total Distance", fmt.Sprintf("%.2f km", report.TotalDistance))
		@Card("Average cost per trip", fmt.Sprintf("$ %.2f CAD", report.AvgCostPerTrip))
		@Card("Average distance per trip", fmt.Sprintf("%.2f km", report.AvgDistance))
	</div>
}

templ ChartContainer(title, id string) {
	<div class="chart-container">
		<h3>{ title }</h3>
		<canvas id={ id }></canvas>
	</div>
}

templ Chart(report ReportData) {
	<div class="chart-grid">
		@ChartContainer("Trips per Day", "tripsByDayChart")
		@ChartContainer("Cost per Day", "chargesByDayChart")
	</div>
	<div class="chart-grid">
		@ChartContainer("Cost per Trip", "costPerTripChart")
		@ChartContainer("Distance vs cost", "distanceVsCostChart")
	</div>
}

templ TripsDetail(report ReportData) {
	<div>
		<table>
			<thead>
				<tr>
					<th>#</th>
					<th>Date</th>
					<th>Vehicle</th>
					<th>Duration</th>
					<th>Cost</th>
					<th>Distance</th>
				</tr>
			</thead>
			<tbody>
				for idx, trip := range report.AllTrips {
					<tr>
						<td>{ idx+1 }</td>
						<td>{ getLocaledTime(trip.Date) } PST</td>
						<td>{ trip.Vehicle }</td>
						<td>{ trip.Duration } min</td>
						<td>${ fmt.Sprintf("%.2f", trip.Charged) } CAD</td>
						<td>{ trip.Distance } km</td>
					</tr>
				}
			</tbody>
		</table>
	</div>
}

templ Body(report ReportData) {
	<body>
		<main class="container">
			<div class="header">
				<h1><i class="fa-solid fa-chart-simple"></i> Trip Analysis Report</h1>
				<p>Report from <strong>{ getLocaledTime(report.DateStart) } PST</strong> to <strong>{ getLocaledTime(report.DateEnd) } PST</strong></p>
				<div class="header-actions">
					<a href={ templ.URL(fmt.Sprintf("/report/%s/csv", report.ID)) } role="button" class="secondary" download={ fmt.Sprintf("trip_report_%s.csv", report.ID) }>
						<i class="fa-solid fa-file-csv"></i> Export as CSV
					</a>
					<a href="https://www.buymeacoffee.com/josuebrune0" target="_blank" rel="noopener noreferrer" role="button" class="contrast">
						<i class="fa-solid fa-mug-saucer"></i> Buy me a coffee
					</a>
				</div>
			</div>
			@Summary(report)
			@Chart(report)
			@TripsDetail(report)
		</main>
		<script>
			const report = {{ report }}
			// Colors for charts
            const colors = [
                'rgba(54, 162, 235, 0.7)',
                'rgba(255, 99, 132, 0.7)',
                'rgba(255, 206, 86, 0.7)',
                'rgba(75, 192, 192, 0.7)',
                'rgba(153, 102, 255, 0.7)',
                'rgba(255, 159, 64, 0.7)',
                'rgba(199, 199, 199, 0.7)'
            ];

			initializeCharts(report.days, report.tripsByDay, report.chargesByDay, 
				report.costPerTrip, report.distancePerTrip, report.costPerTrip, colors)
		</script>
	</body>
}

templ ErrorPage(err string) {
	@component.HTML(templ.Attributes{}) {
		@Head("Report not found")
		<body>
			<main class="container">
				<div class="header">
					<h1>{ err }</h1>
				</div>
			</main>
		</body>
	}
}

templ PrivacyPolicyPage() {
	@component.HTML(templ.Attributes{"lang": "en"}) {
		@Head("Privacy Policy")
		<body>
			<main class="container">
				<div class="header" style="text-align: left; margin-bottom: 2rem;">
					<h1><i class="fa-solid fa-shield-halved"></i> Privacy Policy for EvoStats</h1>
					<p>Last Updated: { time.Now().Format("January 2, 2006") }</p>
				</div>
				<article>
					<h2>Introduction</h2>
					<p>Welcome to EvoStats. We are committed to protecting your privacy. This Privacy Policy explains what information we collect, how we use it, and your rights in relation to it.</p>
					<p>Our service is designed with privacy as a core principle. We only process the data necessary to provide you with your trip analysis, and we do not store it permanently.</p>
					<h2>What Information We Collect</h2>
					<p>When you use the EvoStats Chrome Extension on your car sharing service's trip history page, we collect the following information from that page only:</p>
					<ul>
						<li>Trip dates and times</li>
						<li>Trip duration and distance</li>
						<li>Vehicle information (e.g., model and license plate)</li>
						<li>Cost information for each trip</li>
						<li>Service location (e.g., city)</li>
					</ul>
					<h2>What We <u>Never</u> Collect</h2>
					<p>We are committed to your privacy and have designed our system to explicitly avoid collecting any Personally Identifiable Information (PII). We never collect:</p>
					<ul>
						<li>Your name, email address, or other personal contact details</li>
						<li>Your login credentials for any website</li>
						<li>Your payment details (credit card numbers, etc.)</li>
						<li>Your precise location data outside of the trip context</li>
						<li>Any data from websites other than the specific trip history page you are on when you activate the extension.</li>
					</ul>
					<h2>How We Use Your Information</h2>
					<p>The collected trip data is used for the sole purpose of generating a temporary, personalized analysis report for you.</p>
					<h2>Data Storage and Retention</h2>
					<p>Your privacy is paramount. Hereâ€™s how we handle your data's lifecycle:</p>
					<ol>
						<li><strong>Transmission:</strong> Your scraped trip data is sent securely over HTTPS to our backend service.</li>
						<li><strong>Processing:</strong> The data is processed in-memory to generate your unique report.</li>
						<li><strong>Temporary Storage:</strong> The generated report data is stored temporarily in an in-memory cache (using go-cache) on our server, associated with a unique, unguessable ID.</li>
						<li><strong>Automatic Deletion:</strong> The cached data is automatically deleted after a short period (default is <strong>5 minutes</strong>). After this time, the data is permanently gone and your report link will no longer work.</li>
					</ol>
					<p><strong>We do not store your data in any permanent database.</strong></p>
					<h2>Contact Us</h2>
					<p>If you have any questions about this Privacy Policy, please feel free to open an issue on our <a href="https://github.com/josuebrunel/evostat" target="_blank" rel="noopener noreferrer">GitHub repository</a>.</p>
				</article>
			</main>
		</body>
	}
}

templ Layout(report ReportData) {
	@component.HTML(templ.Attributes{}) {
		@Head(report.ID)
		@Body(report)
	}
}
